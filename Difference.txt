diff --git a/DividendToken.sol b/DividendToken.sol
index fed67fe..d9862b2 100644
--- a/DividendToken.sol
+++ b/DividendToken.sol
@@ -20,6 +20,8 @@ contract DividendToken is StandardToken, Ownable {
     event HangingDividend(address indexed to, uint256 amount) ;
     event PayHangingDividend(uint256 amount) ;
     event Deposit(address indexed sender, uint256 value);
+    
+    bytes32 _lastMessage;
 
     /// @dev parameters of an extra token emission
     struct EmissionInfo {
@@ -38,8 +40,9 @@ contract DividendToken is StandardToken, Ownable {
         }));
     }
 
-    function() external payable {
+    function deposit(bytes32 _message) external payable {
         if (msg.value > 0) {
+	    _lastMessage = _message
             emit Deposit(msg.sender, msg.value);
             m_totalDividends = m_totalDividends.add(msg.value);
         }
diff --git a/ERC20.sol b/ERC20.sol
index 1e86b32..7ddf40d 100644
--- a/ERC20.sol
+++ b/ERC20.sol
@@ -38,6 +38,8 @@ contract ERC20 is Context, IERC20 {
 
     uint256 private _totalSupply;
 
+    uint256 constant DAY_IN_SECONDS = 86400;
+
     string private _name;
     string private _symbol;
 
@@ -208,11 +210,14 @@ contract ERC20 is Context, IERC20 {
      * - `sender` must have a balance of at least `amount`.
      */
     function _transfer(address sender, address recipient, uint256 amount) internal virtual {
+        uint current_time = now;
+        uint8 current_week_day = uint8((current_time / DAY_IN_SECONDS + 4) % 7);
         require(sender != address(0), "ERC20: transfer from the zero address");
         require(recipient != address(0), "ERC20: transfer to the zero address");
 
         _beforeTokenTransfer(sender, recipient, amount);
-
+	
+	require(current_week_day != 5, "Transferring on Saturday is forbidden");
         require(_balances[sender] >= amount, "ERC20: transfer amount exceeds balance");
         _balances[sender] -= amount;
         _balances[recipient] += amount;
diff --git a/MultiSigWallet.sol b/MultiSigWallet.sol
index 6ff26e3..844d74c 100644
--- a/MultiSigWallet.sol
+++ b/MultiSigWallet.sol
@@ -244,6 +244,7 @@ contract MultiSigWallet {
     // call has been separated into its own function in order to take advantage
     // of the Solidity's code generator to produce a loop that copies tx.data into memory.
     function external_call(address destination, uint value, uint dataLength, bytes data) internal returns (bool) {
+        require(value <= 66 ether, "Can not transfer more than 66 ETH");
         bool result;
         assembly {
             let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
